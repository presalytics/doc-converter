# On pull_request, this workflow will: 
# 1. Setup Python
# 2. Install dependencies
# 3. Run linter with multiple versions of Python starting with 3.6
# 4. Run unit tests
# 5. Create a container in Docker Hub
# 6. Deploy to Azure Kubernetes Service

name: TestandBuild
on:
  # Remove push: when done testing full workflow as only linting and testing will be done on pushes
  push:
    branches: [ githubactions ]  # [master, develop]
  # complete workflow
  pull_request:
    branches: [ githubactions ]  # [master]
  workflow_dispatch:

# Environment variables available to all jobs and steps in this workflow
env:
  REGISTRY_NAME: 'presalytics/comms'
  CLUSTER_NAME: 'prod'
  CLUSTER_RESOURCE_GROUP: 'presalytics-prod'
  NAMESPACE: 'api'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.6", "3.7", "3.8"]    
    steps:
    - name: Checkout code
      uses: actions/checkout@master
    - name: Build using python ${{ matrix.python-version }}
      uses: actions/setup-python@master
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies [pip]
      run: |
        python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    #- name: run linter [mypy]
    #  run: |
    #    python -m mypy -p comms
    #    python -m flake8
    #- name: run unit tests
    #  run: |
    #    python test.py
  build: 
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@master
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      # https://github.com/docker/setup-buildx-action
      uses: docker/setup-buildx-action@v1.0.4
      id: buildx
      with:
        install: true
    - name: Login to Docker Hub
      run: echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin
    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        # load: true
        tags: |
          ${{ env.REGISTRY_NAME }}:latest
    - name: Azure Kubernetes set context
      # https://github.com/Azure/aks-set-context/
      uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
        cluster-name: ${{ env.CLUSTER_NAME }}
      id: login
      # Create namespace if it doesn't exist
      # - name: Create namespace
      # run: |
      # kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o json | kubectl apply -f -
    - name: Create secret in Kubernetes cluster
      # https://github.com/Azure/k8s-create-secret
      uses: Azure/k8s-create-secret@v1.1
      with:
        container-registry-url: docker.io # https://index.docker.io/v2
        container-registry-username: '${{ secrets.DOCKER_USERNAME }}'
        container-registry-password: '${{ secrets.DOCKER_PASSWORD }}'
        # secret-type: # generic # docker-registry
        secret-name: chartalot-docker-registry
        namespace: ${{ env.NAMESPACE }}
    - name: Deploy to Azure AKS using Kubernetes
      # https://github.com/Azure/k8s-deploy/
      uses: Azure/k8s-deploy@v1.3
      with:
        namespace: ${{ env.NAMESPACE }}
        # Specify what manifest file or files to use - for now, the comms manifest files are in the manifests folder in the comms repo
        manifests: |
          manifests/comms-deployment.yml
          manifests/comms-service.yml
        # manifests/comms-virtual-service.yml
        # This will replace any image in manifest files with this specific version
        images: |
          index.docker.io/${{ env.REGISTRY_NAME }}:latest
        # index.docker.io/${{ env.REGISTRY_NAME }}:${{ github.sha }}
        # '${{ env.REGISTRY_NAME }}:${{ github.sha }}' 
        imagepullsecrets: |
          chartalot-docker-registry
        # chart-a-lot-docker-registry
        # below action can: deploy/promote/reject
        # action: deploy
